module(
    name = "org_openmined_psi",
    version = "2.0.6",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Core Bazel dependencies from Bazel Central Repository
bazel_dep(name = "abseil-cpp", version = "20240722.0")
bazel_dep(name = "apple_support", version = "1.17.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "boringssl", version = "0.20240913.0")
bazel_dep(name = "gazelle", version = "0.39.1")
bazel_dep(name = "glog", version = "0.7.1")
bazel_dep(name = "google_benchmark", version = "1.8.5")
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "grpc", version = "1.66.0.bcr.2", repo_name = "com_github_grpc_grpc")  # aliased for PCJ
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "protobuf", version = "28.3")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "rules_apple", version = "3.11.2")
bazel_dep(name = "rules_cc", version = "0.0.13")
bazel_dep(name = "rules_go", version = "0.50.1")
bazel_dep(name = "rules_java", version = "7.12.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto_grpc", version = "5.0.0")
bazel_dep(name = "rules_proto_grpc_cpp", version = "5.0.0")
bazel_dep(name = "rules_proto_grpc_go", version = "5.0.0")
bazel_dep(name = "rules_proto_grpc_python", version = "5.0.0")
bazel_dep(name = "rules_python", version = "0.37.2")
bazel_dep(name = "rules_rust", version = "0.53.0")

## PCJ
http_archive(
    name = "private_join_and_compute",
    sha256 = "a53b9db35ad42aaf8a778a859915e5cca08f33800c314f04b3fcb0f2c5e148b3",
    strip_prefix = "private-join-and-compute-e81563e0e3caa0f6178e8668be8a4434d2cef352",
    url = "https://github.com/s0l0ist/private-join-and-compute/archive/e81563e0e3caa0f6178e8668be8a4434d2cef352.zip",
)

## Python
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.8",
)
python.toolchain(
    python_version = "3.9",
)
python.toolchain(
    python_version = "3.10",
)
python.toolchain(
    python_version = "3.11",
)
python.toolchain(
    python_version = "3.12",
)
python.toolchain(
    python_version = "3.13",
)

use_repo(
    python,
    # register toolchains
    "python_3_8",
    "python_3_9",
    "python_3_10",
    "python_3_11",
    "python_3_12",
    "python_3_13",
    # Handy helper for all
    "python_versions",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
use_repo(pip, "psi_deps")
pip.parse(
    hub_name = "psi_deps",
    python_version = "3.8",
    requirements_lock = "//private_set_intersection/python/requirements:requirements_lock_3_8.txt",
)
pip.parse(
    hub_name = "psi_deps",
    python_version = "3.9",
    requirements_lock = "//private_set_intersection/python/requirements:requirements_lock_3_9.txt",
)
pip.parse(
    hub_name = "psi_deps",
    python_version = "3.10",
    requirements_lock = "//private_set_intersection/python/requirements:requirements_lock_3_10.txt",
)
pip.parse(
    hub_name = "psi_deps",
    python_version = "3.11",
    requirements_lock = "//private_set_intersection/python/requirements:requirements_lock_3_11.txt",
)
pip.parse(
    hub_name = "psi_deps",
    python_version = "3.12",
    requirements_lock = "//private_set_intersection/python/requirements:requirements_lock_3_12.txt",
)
pip.parse(
    hub_name = "psi_deps",
    python_version = "3.13",
    requirements_lock = "//private_set_intersection/python/requirements:requirements_lock_3_13.txt",
)

python_abi = use_extension("//private_set_intersection/python:extensions.bzl", "python_abi")
use_repo(python_abi, "python_abi")

python_platform = use_extension("//private_set_intersection/python:extensions.bzl", "python_platform")
use_repo(python_platform, "python_platform")

## Rust
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.81.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

register_toolchains("@rules_rust//proto/protobuf:default-proto-toolchain")
rust_proto = use_extension("@rules_rust//proto:extensions.bzl", "rust_proto")
rust_proto.repositories()

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate", isolate = True)
crate.spec(
    package = "libc",
    version = "0.2.159",
)
crate.spec(
    package = "protobuf",
    version = "3.5.1",
)
crate.spec(
    package = "semver",
    version = "1.0.23",
)
crate.spec(
    package = "bencher",
    version = "0.1.5",
)
crate.from_specs()
use_repo(crate, "crates")

## Golang
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_sdk.download(version = "1.23.0")
use_repo(
    go_sdk,
    "go_toolchains",
)
register_toolchains("@go_toolchains//:all")
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

go_deps.from_file(go_mod = "//private_set_intersection/go:go.mod")
use_repo(
    go_deps,
    "org_golang_google_protobuf",
)
