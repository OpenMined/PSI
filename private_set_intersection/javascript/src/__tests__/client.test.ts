import PSI from '../wasm_node'
import { ERROR_INSTANCE_DELETED } from '../implementation/constants'
import { PSILibrary } from '../implementation/psi'
import { Response, ServerSetup } from '../implementation/proto/psi_pb'

let psi: PSILibrary
beforeAll(async () => {
  psi = await PSI()
})

describe('PSI Client', () => {
  test('It should create from an existing key', async () => {
    const client1 = psi.client!.createWithNewKey()
    const key = client1.getPrivateKeyBytes()

    const client2 = psi.client!.createFromKey(key)

    expect(client2.getPrivateKeyBytes()).toEqual(key)
  })

  test('It should fail to create from an invalid key', async () => {
    const key = Uint8Array.from({ length: 32 })
    expect(() => psi.client!.createFromKey(key)).toThrow()
  })
  test('It should throw if deleted twice', async () => {
    const client = psi.client!.createWithNewKey()

    client.delete()

    expect(client.delete).toThrow(ERROR_INSTANCE_DELETED)
  })

  test('It should return the private key as a binary array', async () => {
    const client = psi.client!.createWithNewKey()
    const keyLength = 32
    const key = client.getPrivateKeyBytes()
    expect(key.length).toBe(keyLength)
  })

  test('It should fail return the private key as a binary array if deleted', async () => {
    const client = psi.client!.createWithNewKey()
    client.delete()
    expect(client.getPrivateKeyBytes.bind(client)).toThrow(
      ERROR_INSTANCE_DELETED
    )
  })

  test('It should create a request', async () => {
    const client = psi.client!.createWithNewKey()
    const numClientElements = 10
    const clientInputs = Array.from(
      { length: numClientElements },
      (_, i) => `Element ${i}`
    )

    const request = client.createRequest(clientInputs)
    expect(request.getEncryptedElementsList().length).toStrictEqual(
      numClientElements
    )
  })

  test('It should throw if attempting to create a request after deletion', async () => {
    const client = psi.client!.createWithNewKey()
    const numClientElements = 100
    const clientInputs = Array.from(
      { length: numClientElements },
      (_, i) => `Element ${i}`
    )

    client.delete()

    expect(client.createRequest.bind(client, clientInputs)).toThrow(
      ERROR_INSTANCE_DELETED
    )
  })

  test('It should process a response (cardinality) [GCS]', async () => {
    // prettier-ignore
    const key = Uint8Array.from([
      160, 193, 102,   5, 219, 141,  42, 183,
      157, 180,  97, 194,  33, 176,  95, 191,
       77, 185, 205, 139,  61, 124,   1, 178,
      198, 110, 236, 127,  64, 242, 152,  15
    ])
    const client = psi.client!.createFromKey(key)

    // prettier-ignore
    const serverSetup = ServerSetup.deserializeBinary(Uint8Array.from([
        10,   6,   8,   9,  16, 160, 141,   6,  26, 145,   1, 156,
      124,  83, 130, 180,  41,  13, 249,   1, 160,  66, 225, 180,
      102,  13, 186, 232, 132, 241,  96, 160,  28,  76, 132, 180,
      174,   0, 237, 108,  36, 157,  81, 137,  81, 127, 152,  70,
        60, 101,  15, 115, 201,  88, 204, 220,  14, 190, 136, 164,
        2,  51, 141, 245, 160,  62,  55, 221,  23,  64,  22, 143,
      242, 126,  57, 222, 180, 110, 125, 196,   1, 162, 228,  13,
      133,   2,  63, 225, 105,  72, 148, 234, 184,  79, 143, 204,
      148,  80, 122, 239,  70, 226,  93, 105, 118, 117,  46, 120,
        4,  12,  47,  87, 126, 245,   6, 135,  24,  21, 228, 145,
        49, 194, 180,  50, 255,  21, 233, 166, 226, 140,   5,  77,
        7, 131, 118,  88, 132, 233,   2, 147, 128,  83,  16, 242,
      171, 197,  88,   9, 148,  22, 129,  12, 112, 149, 170,   1
    ]))

    // prettier-ignore
    const response = Response.deserializeBinary(Uint8Array.from([
        10,  33,   3,  76, 217, 211, 215, 254, 176,  87,  33, 177,
      111, 184, 131,   7, 251, 172, 119,  48,  58, 156, 152,  18,
      186, 184, 140, 122, 119, 253, 134, 206, 216, 193,   5,  10,
        33,   3, 153,  37,  67,  82, 212,  45, 237, 208, 191, 226,
        31,  75, 233, 165,  62, 126,  69,  93, 227, 207,  61,  22,
        84, 196, 196,  73,  96, 234, 110,  75, 170, 229,  10,  33,
        3, 141, 219, 163, 220, 158,  79,  10,  77,  55, 211, 205,
        67, 160, 141,  61, 149, 156,  88, 126,  72,  94, 213,  42,
      126, 245, 177,  50,  34,  90, 129, 193, 165,  10,  33,   2,
        78,  83, 208, 113,  10,  63,  19, 208,  30, 134, 222, 189,
        84,  35, 204, 184,  42,  23,  60, 138, 236,  88, 161,  35,
      156,  54, 227,  58,  86,  22, 232, 116,  10,  33,   3, 159,
      214, 143, 126, 207, 205,  25,  47, 174, 247,  87, 223, 117,
        48, 106,  60, 203, 131, 125,  78,   8, 249, 141,  91, 214,
      249, 239, 171, 120, 178,  50,  59,  10,  33,   3,  52, 239,
        62, 190, 198, 211, 210, 185, 126,  26, 167, 170,  51, 218,
        14, 121, 114,  68,   0,  99,  25, 198,  74, 169, 235, 245,
        13, 234, 188, 200,  24, 150,  10,  33,   2,  36, 121, 159,
        69,   8, 220, 251, 171, 213,  97, 193, 228, 171, 161, 171,
      186,  96, 145, 190,   8, 174,  33, 160, 163, 214,  69,   0,
      165, 161,  92,  94, 165,  10,  33,   2, 196, 108, 146, 176,
      132, 215, 102,  87, 221,  29, 248,  65,  53, 145, 120, 220,
        34, 136,  76,  91, 188,  35, 117, 239, 171, 174, 132, 154,
      125,  50, 254, 158,  10,  33,   2,  34, 245,  53,  64,  84,
        70, 211, 155, 133, 221, 136, 142, 173, 212, 234, 129,   0,
        88,  99, 234, 212, 131, 188, 129, 174, 168,  95,  42, 131,
      108, 120, 197,  10,  33,   3, 231, 207, 242,  34,  77,  41,
        49,  61, 155, 163, 188,  51,  90,  70,   1,  15, 189, 140,
      231,  10,  53, 120,  90, 155, 163,  88, 209, 165, 234,  47,
        4, 126
    ]))

    const intersection = client.getIntersectionSize(serverSetup, response)
    expect(intersection).toStrictEqual(0)
  })

  test('It should process a response (intersection)', async () => {
    // prettier-ignore
    const key = Uint8Array.from([
      160, 193, 102,   5, 219, 141,  42, 183,
      157, 180,  97, 194,  33, 176,  95, 191,
       77, 185, 205, 139,  61, 124,   1, 178,
      198, 110, 236, 127,  64, 242, 152,  15
    ])
    const client = psi.client!.createFromKey(key, true)

    // prettier-ignore
    const serverSetup = ServerSetup.deserializeBinary(Uint8Array.from([
        10,   6,   8,   9,  16, 160, 141,   6,  26, 145,   1, 156,
      124,  83, 130, 180,  41,  13, 249,   1, 160,  66, 225, 180,
      102,  13, 186, 232, 132, 241,  96, 160,  28,  76, 132, 180,
      174,   0, 237, 108,  36, 157,  81, 137,  81, 127, 152,  70,
        60, 101,  15, 115, 201,  88, 204, 220,  14, 190, 136, 164,
        2,  51, 141, 245, 160,  62,  55, 221,  23,  64,  22, 143,
      242, 126,  57, 222, 180, 110, 125, 196,   1, 162, 228,  13,
      133,   2,  63, 225, 105,  72, 148, 234, 184,  79, 143, 204,
      148,  80, 122, 239,  70, 226,  93, 105, 118, 117,  46, 120,
        4,  12,  47,  87, 126, 245,   6, 135,  24,  21, 228, 145,
        49, 194, 180,  50, 255,  21, 233, 166, 226, 140,   5,  77,
        7, 131, 118,  88, 132, 233,   2, 147, 128,  83,  16, 242,
      171, 197,  88,   9, 148,  22, 129,  12, 112, 149, 170,   1
    ]))

    // prettier-ignore
    const response = Response.deserializeBinary(Uint8Array.from([
      10,  33,   3,  76, 217, 211, 215, 254, 176,  87,  33, 177,
    111, 184, 131,   7, 251, 172, 119,  48,  58, 156, 152,  18,
    186, 184, 140, 122, 119, 253, 134, 206, 216, 193,   5,  10,
      33,   3, 153,  37,  67,  82, 212,  45, 237, 208, 191, 226,
      31,  75, 233, 165,  62, 126,  69,  93, 227, 207,  61,  22,
      84, 196, 196,  73,  96, 234, 110,  75, 170, 229,  10,  33,
      3, 141, 219, 163, 220, 158,  79,  10,  77,  55, 211, 205,
      67, 160, 141,  61, 149, 156,  88, 126,  72,  94, 213,  42,
    126, 245, 177,  50,  34,  90, 129, 193, 165,  10,  33,   2,
      78,  83, 208, 113,  10,  63,  19, 208,  30, 134, 222, 189,
      84,  35, 204, 184,  42,  23,  60, 138, 236,  88, 161,  35,
    156,  54, 227,  58,  86,  22, 232, 116,  10,  33,   3, 159,
    214, 143, 126, 207, 205,  25,  47, 174, 247,  87, 223, 117,
      48, 106,  60, 203, 131, 125,  78,   8, 249, 141,  91, 214,
    249, 239, 171, 120, 178,  50,  59,  10,  33,   3,  52, 239,
      62, 190, 198, 211, 210, 185, 126,  26, 167, 170,  51, 218,
      14, 121, 114,  68,   0,  99,  25, 198,  74, 169, 235, 245,
      13, 234, 188, 200,  24, 150,  10,  33,   2,  36, 121, 159,
      69,   8, 220, 251, 171, 213,  97, 193, 228, 171, 161, 171,
    186,  96, 145, 190,   8, 174,  33, 160, 163, 214,  69,   0,
    165, 161,  92,  94, 165,  10,  33,   2, 196, 108, 146, 176,
    132, 215, 102,  87, 221,  29, 248,  65,  53, 145, 120, 220,
      34, 136,  76,  91, 188,  35, 117, 239, 171, 174, 132, 154,
    125,  50, 254, 158,  10,  33,   2,  34, 245,  53,  64,  84,
      70, 211, 155, 133, 221, 136, 142, 173, 212, 234, 129,   0,
      88,  99, 234, 212, 131, 188, 129, 174, 168,  95,  42, 131,
    108, 120, 197,  10,  33,   3, 231, 207, 242,  34,  77,  41,
      49,  61, 155, 163, 188,  51,  90,  70,   1,  15, 189, 140,
    231,  10,  53, 120,  90, 155, 163,  88, 209, 165, 234,  47,
      4, 126
  ]))

    const intersection = client.getIntersection(serverSetup, response)
    expect(intersection).toStrictEqual([])
  })

  test('It should throw if attempting to process a response after deletion (cardinality)', async () => {
    const client = psi.client!.createWithNewKey()
    // prettier-ignore
    const serverSetup = ServerSetup.deserializeBinary(Uint8Array.from([
        10,   6,   8,   9,  16, 160, 141,   6,  26, 145,   1, 156,
      124,  83, 130, 180,  41,  13, 249,   1, 160,  66, 225, 180,
      102,  13, 186, 232, 132, 241,  96, 160,  28,  76, 132, 180,
      174,   0, 237, 108,  36, 157,  81, 137,  81, 127, 152,  70,
        60, 101,  15, 115, 201,  88, 204, 220,  14, 190, 136, 164,
        2,  51, 141, 245, 160,  62,  55, 221,  23,  64,  22, 143,
      242, 126,  57, 222, 180, 110, 125, 196,   1, 162, 228,  13,
      133,   2,  63, 225, 105,  72, 148, 234, 184,  79, 143, 204,
      148,  80, 122, 239,  70, 226,  93, 105, 118, 117,  46, 120,
        4,  12,  47,  87, 126, 245,   6, 135,  24,  21, 228, 145,
        49, 194, 180,  50, 255,  21, 233, 166, 226, 140,   5,  77,
        7, 131, 118,  88, 132, 233,   2, 147, 128,  83,  16, 242,
      171, 197,  88,   9, 148,  22, 129,  12, 112, 149, 170,   1
    ]))

    // prettier-ignore
    const response = Response.deserializeBinary(Uint8Array.from([
        10,  33,   3,  76, 217, 211, 215, 254, 176,  87,  33, 177,
      111, 184, 131,   7, 251, 172, 119,  48,  58, 156, 152,  18,
      186, 184, 140, 122, 119, 253, 134, 206, 216, 193,   5,  10,
        33,   3, 153,  37,  67,  82, 212,  45, 237, 208, 191, 226,
        31,  75, 233, 165,  62, 126,  69,  93, 227, 207,  61,  22,
        84, 196, 196,  73,  96, 234, 110,  75, 170, 229,  10,  33,
        3, 141, 219, 163, 220, 158,  79,  10,  77,  55, 211, 205,
        67, 160, 141,  61, 149, 156,  88, 126,  72,  94, 213,  42,
      126, 245, 177,  50,  34,  90, 129, 193, 165,  10,  33,   2,
        78,  83, 208, 113,  10,  63,  19, 208,  30, 134, 222, 189,
        84,  35, 204, 184,  42,  23,  60, 138, 236,  88, 161,  35,
      156,  54, 227,  58,  86,  22, 232, 116,  10,  33,   3, 159,
      214, 143, 126, 207, 205,  25,  47, 174, 247,  87, 223, 117,
        48, 106,  60, 203, 131, 125,  78,   8, 249, 141,  91, 214,
      249, 239, 171, 120, 178,  50,  59,  10,  33,   3,  52, 239,
        62, 190, 198, 211, 210, 185, 126,  26, 167, 170,  51, 218,
        14, 121, 114,  68,   0,  99,  25, 198,  74, 169, 235, 245,
        13, 234, 188, 200,  24, 150,  10,  33,   2,  36, 121, 159,
        69,   8, 220, 251, 171, 213,  97, 193, 228, 171, 161, 171,
      186,  96, 145, 190,   8, 174,  33, 160, 163, 214,  69,   0,
      165, 161,  92,  94, 165,  10,  33,   2, 196, 108, 146, 176,
      132, 215, 102,  87, 221,  29, 248,  65,  53, 145, 120, 220,
        34, 136,  76,  91, 188,  35, 117, 239, 171, 174, 132, 154,
      125,  50, 254, 158,  10,  33,   2,  34, 245,  53,  64,  84,
        70, 211, 155, 133, 221, 136, 142, 173, 212, 234, 129,   0,
        88,  99, 234, 212, 131, 188, 129, 174, 168,  95,  42, 131,
      108, 120, 197,  10,  33,   3, 231, 207, 242,  34,  77,  41,
        49,  61, 155, 163, 188,  51,  90,  70,   1,  15, 189, 140,
      231,  10,  53, 120,  90, 155, 163,  88, 209, 165, 234,  47,
        4, 126
    ]))

    client.delete()

    expect(
      client.getIntersectionSize.bind(client, serverSetup, response)
    ).toThrow(ERROR_INSTANCE_DELETED)
  })

  test('It should throw if attempting to process a response after deletion (intersection)', async () => {
    const client = psi.client!.createWithNewKey(true)
    // prettier-ignore
    const serverSetup = ServerSetup.deserializeBinary(Uint8Array.from([
        10,   6,   8,   9,  16, 160, 141,   6,  26, 145,   1, 156,
      124,  83, 130, 180,  41,  13, 249,   1, 160,  66, 225, 180,
      102,  13, 186, 232, 132, 241,  96, 160,  28,  76, 132, 180,
      174,   0, 237, 108,  36, 157,  81, 137,  81, 127, 152,  70,
        60, 101,  15, 115, 201,  88, 204, 220,  14, 190, 136, 164,
        2,  51, 141, 245, 160,  62,  55, 221,  23,  64,  22, 143,
      242, 126,  57, 222, 180, 110, 125, 196,   1, 162, 228,  13,
      133,   2,  63, 225, 105,  72, 148, 234, 184,  79, 143, 204,
      148,  80, 122, 239,  70, 226,  93, 105, 118, 117,  46, 120,
        4,  12,  47,  87, 126, 245,   6, 135,  24,  21, 228, 145,
        49, 194, 180,  50, 255,  21, 233, 166, 226, 140,   5,  77,
        7, 131, 118,  88, 132, 233,   2, 147, 128,  83,  16, 242,
      171, 197,  88,   9, 148,  22, 129,  12, 112, 149, 170,   1
    ]))

    // prettier-ignore
    const response = Response.deserializeBinary(Uint8Array.from([
        10,  33,   3,  76, 217, 211, 215, 254, 176,  87,  33, 177,
      111, 184, 131,   7, 251, 172, 119,  48,  58, 156, 152,  18,
      186, 184, 140, 122, 119, 253, 134, 206, 216, 193,   5,  10,
        33,   3, 153,  37,  67,  82, 212,  45, 237, 208, 191, 226,
        31,  75, 233, 165,  62, 126,  69,  93, 227, 207,  61,  22,
        84, 196, 196,  73,  96, 234, 110,  75, 170, 229,  10,  33,
        3, 141, 219, 163, 220, 158,  79,  10,  77,  55, 211, 205,
        67, 160, 141,  61, 149, 156,  88, 126,  72,  94, 213,  42,
      126, 245, 177,  50,  34,  90, 129, 193, 165,  10,  33,   2,
        78,  83, 208, 113,  10,  63,  19, 208,  30, 134, 222, 189,
        84,  35, 204, 184,  42,  23,  60, 138, 236,  88, 161,  35,
      156,  54, 227,  58,  86,  22, 232, 116,  10,  33,   3, 159,
      214, 143, 126, 207, 205,  25,  47, 174, 247,  87, 223, 117,
        48, 106,  60, 203, 131, 125,  78,   8, 249, 141,  91, 214,
      249, 239, 171, 120, 178,  50,  59,  10,  33,   3,  52, 239,
        62, 190, 198, 211, 210, 185, 126,  26, 167, 170,  51, 218,
        14, 121, 114,  68,   0,  99,  25, 198,  74, 169, 235, 245,
        13, 234, 188, 200,  24, 150,  10,  33,   2,  36, 121, 159,
        69,   8, 220, 251, 171, 213,  97, 193, 228, 171, 161, 171,
      186,  96, 145, 190,   8, 174,  33, 160, 163, 214,  69,   0,
      165, 161,  92,  94, 165,  10,  33,   2, 196, 108, 146, 176,
      132, 215, 102,  87, 221,  29, 248,  65,  53, 145, 120, 220,
        34, 136,  76,  91, 188,  35, 117, 239, 171, 174, 132, 154,
      125,  50, 254, 158,  10,  33,   2,  34, 245,  53,  64,  84,
        70, 211, 155, 133, 221, 136, 142, 173, 212, 234, 129,   0,
        88,  99, 234, 212, 131, 188, 129, 174, 168,  95,  42, 131,
      108, 120, 197,  10,  33,   3, 231, 207, 242,  34,  77,  41,
        49,  61, 155, 163, 188,  51,  90,  70,   1,  15, 189, 140,
      231,  10,  53, 120,  90, 155, 163,  88, 209, 165, 234,  47,
        4, 126
    ]))

    client.delete()

    expect(client.getIntersection.bind(client, serverSetup, response)).toThrow(
      ERROR_INSTANCE_DELETED
    )
  })

  test('It should fail to process a response (cardinality)', async () => {
    const client = psi.client!.createWithNewKey()
    const serverSetup = new ServerSetup()
    const serverResponse = new Response()

    expect(
      client.getIntersectionSize.bind(client, serverSetup, serverResponse)
    ).toThrow()
  })

  test('It should fail to process a response (intersection)', async () => {
    const client = psi.client!.createWithNewKey(true)
    const serverSetup = new ServerSetup()
    const serverResponse = new Response()

    expect(
      client.getIntersection.bind(client, serverSetup, serverResponse)
    ).toThrow()
  })
})
